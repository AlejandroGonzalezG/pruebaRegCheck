{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable no-useless-escape */\n\nimport { ref, reactive } from 'vue';\nimport { injectProp } from '../../utils/private.inject-obj-prop/inject-obj-prop.js';\n\n/**\n * __ QUASAR_SSR __            -> runs on SSR on client or server\n * __ QUASAR_SSR_SERVER __     -> runs on SSR on server\n * __ QUASAR_SSR_CLIENT __     -> runs on SSR on client\n * __ QUASAR_SSR_PWA __        -> built with SSR+PWA; may run on SSR on client or on PWA client\n *                              (needs runtime detection)\n */\n\nexport const isRuntimeSsrPreHydration = __QUASAR_SSR_SERVER__ ? {\n  value: true\n} : ref(__QUASAR_SSR_CLIENT__ && (__QUASAR_SSR_PWA__ ? document.body.getAttribute('data-server-rendered') !== null : true));\nlet preHydrationBrowser;\nfunction getMatch(userAgent, platformMatch) {\n  const match = /(edg|edge|edga|edgios)\\/([\\w.]+)/.exec(userAgent) || /(opr)[\\/]([\\w.]+)/.exec(userAgent) || /(vivaldi)[\\/]([\\w.]+)/.exec(userAgent) || /(chrome|crios)[\\/]([\\w.]+)/.exec(userAgent) || /(version)(applewebkit)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent) || /(webkit)[\\/]([\\w.]+).*(version)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent) || /(firefox|fxios)[\\/]([\\w.]+)/.exec(userAgent) || /(webkit)[\\/]([\\w.]+)/.exec(userAgent) || /(opera)(?:.*version|)[\\/]([\\w.]+)/.exec(userAgent) || [];\n  return {\n    browser: match[5] || match[3] || match[1] || '',\n    version: match[4] || match[2] || '0',\n    platform: platformMatch[0] || ''\n  };\n}\nfunction getPlatformMatch(userAgent) {\n  return /(ipad)/.exec(userAgent) || /(ipod)/.exec(userAgent) || /(windows phone)/.exec(userAgent) || /(iphone)/.exec(userAgent) || /(kindle)/.exec(userAgent) || /(silk)/.exec(userAgent) || /(android)/.exec(userAgent) || /(win)/.exec(userAgent) || /(mac)/.exec(userAgent) || /(linux)/.exec(userAgent) || /(cros)/.exec(userAgent)\n  // TODO: Remove BlackBerry detection. BlackBerry OS, BlackBerry 10, and BlackBerry PlayBook OS\n  // is officially dead as of January 4, 2022 (https://www.blackberry.com/us/en/support/devices/end-of-life)\n  || /(playbook)/.exec(userAgent) || /(bb)/.exec(userAgent) || /(blackberry)/.exec(userAgent) || [];\n}\nconst hasTouch = __QUASAR_SSR_SERVER__ ? false : 'ontouchstart' in window || window.navigator.maxTouchPoints > 0;\nfunction getPlatform(UA) {\n  const userAgent = UA.toLowerCase();\n  const platformMatch = getPlatformMatch(userAgent);\n  const matched = getMatch(userAgent, platformMatch);\n  const browser = {\n    mobile: false,\n    desktop: false,\n    cordova: false,\n    capacitor: false,\n    nativeMobile: false,\n    // nativeMobileWrapper: void 0,\n    electron: false,\n    bex: false,\n    linux: false,\n    mac: false,\n    win: false,\n    cros: false,\n    chrome: false,\n    firefox: false,\n    opera: false,\n    safari: false,\n    vivaldi: false,\n    edge: false,\n    edgeChromium: false,\n    ie: false,\n    webkit: false,\n    android: false,\n    ios: false,\n    ipad: false,\n    iphone: false,\n    ipod: false,\n    kindle: false,\n    winphone: false,\n    blackberry: false,\n    playbook: false,\n    silk: false\n  };\n  if (matched.browser) {\n    browser[matched.browser] = true;\n    browser.version = matched.version;\n    browser.versionNumber = parseInt(matched.version, 10);\n  }\n  if (matched.platform) {\n    browser[matched.platform] = true;\n  }\n  const knownMobiles = browser.android || browser.ios || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser['windows phone'];\n\n  // These are all considered mobile platforms, meaning they run a mobile browser\n  if (knownMobiles === true || userAgent.indexOf('mobile') !== -1) {\n    browser.mobile = true;\n  }\n  // If it's not mobile we should consider it's desktop platform, meaning it runs a desktop browser\n  // It's a workaround for anonymized user agents\n  // (browser.cros || browser.mac || browser.linux || browser.win)\n  else {\n    browser.desktop = true;\n  }\n  if (browser['windows phone']) {\n    browser.winphone = true;\n    delete browser['windows phone'];\n  }\n  if (browser.edga || browser.edgios || browser.edg) {\n    browser.edge = true;\n    matched.browser = 'edge';\n  } else if (browser.crios) {\n    browser.chrome = true;\n    matched.browser = 'chrome';\n  } else if (browser.fxios) {\n    browser.firefox = true;\n    matched.browser = 'firefox';\n  }\n\n  // Set iOS if on iPod, iPad or iPhone\n  if (browser.ipod || browser.ipad || browser.iphone) {\n    browser.ios = true;\n  }\n  if (browser.vivaldi) {\n    matched.browser = 'vivaldi';\n    browser.vivaldi = true;\n  }\n\n  // TODO: The assumption about WebKit based browsers below is not completely accurate.\n  // Google released Blink(a fork of WebKit) engine on April 3, 2013, which is really different than WebKit today.\n  // Today, one might want to check for WebKit to deal with its bugs, which is used on all browsers on iOS, and Safari browser on all platforms.\n  if (\n  // Chrome, Opera 15+, Vivaldi and Safari are webkit based browsers\n  browser.chrome || browser.opr || browser.safari || browser.vivaldi\n  // we expect unknown, non iOS mobile browsers to be webkit based\n  || browser.mobile === true && browser.ios !== true && knownMobiles !== true) {\n    browser.webkit = true;\n  }\n\n  // Opera 15+ are identified as opr\n  if (browser.opr) {\n    matched.browser = 'opera';\n    browser.opera = true;\n  }\n\n  // Some browsers are marked as Safari but are not\n  if (browser.safari) {\n    if (browser.blackberry || browser.bb) {\n      matched.browser = 'blackberry';\n      browser.blackberry = true;\n    } else if (browser.playbook) {\n      matched.browser = 'playbook';\n      browser.playbook = true;\n    } else if (browser.android) {\n      matched.browser = 'android';\n      browser.android = true;\n    } else if (browser.kindle) {\n      matched.browser = 'kindle';\n      browser.kindle = true;\n    } else if (browser.silk) {\n      matched.browser = 'silk';\n      browser.silk = true;\n    }\n  }\n\n  // Assign the name and platform variable\n  browser.name = matched.browser;\n  browser.platform = matched.platform;\n  if (__QUASAR_SSR_SERVER__ !== true) {\n    if (userAgent.indexOf('electron') !== -1) {\n      browser.electron = true;\n    } else if (document.location.href.indexOf('-extension://') !== -1) {\n      browser.bex = true;\n    } else {\n      if (window.Capacitor !== void 0) {\n        browser.capacitor = true;\n        browser.nativeMobile = true;\n        browser.nativeMobileWrapper = 'capacitor';\n      } else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {\n        browser.cordova = true;\n        browser.nativeMobile = true;\n        browser.nativeMobileWrapper = 'cordova';\n      }\n      if (isRuntimeSsrPreHydration.value === true) {\n        /*\n         * We need to remember the current state as\n         * everything that follows can only be corrected client-side,\n         * but we don't want to brake the hydration.\n         *\n         * The \"client\" object is imported throughout the UI and should\n         * be as accurate as possible given all the knowledge that we posses\n         * because decisions are required to be made immediately, even\n         * before the hydration occurs.\n         */\n        preHydrationBrowser = {\n          is: {\n            ...browser\n          }\n        };\n      }\n\n      /*\n       * All the following should be client-side corrections only\n       */\n\n      if (hasTouch === true && browser.mac === true && (browser.desktop === true && browser.safari === true || browser.nativeMobile === true && browser.android !== true && browser.ios !== true && browser.ipad !== true)) {\n        /*\n         * Correction needed for iOS since the default\n         * setting on iPad is to request desktop view; if we have\n         * touch support and the user agent says it's a\n         * desktop, we infer that it's an iPhone/iPad with desktop view\n         * so we must fix the false positives\n         */\n\n        delete browser.mac;\n        delete browser.desktop;\n        const platform = Math.min(window.innerHeight, window.innerWidth) > 414 ? 'ipad' : 'iphone';\n        Object.assign(browser, {\n          mobile: true,\n          ios: true,\n          platform,\n          [platform]: true\n        });\n      }\n      if (browser.mobile !== true && window.navigator.userAgentData && window.navigator.userAgentData.mobile) {\n        /*\n         * Correction needed on client-side when\n         * we also have the navigator userAgentData\n         */\n\n        delete browser.desktop;\n        browser.mobile = true;\n      }\n    }\n  }\n  return browser;\n}\nconst userAgent = __QUASAR_SSR_SERVER__ ? '' : navigator.userAgent || navigator.vendor || window.opera;\nconst ssrClient = {\n  has: {\n    touch: false,\n    webStorage: false\n  },\n  within: {\n    iframe: false\n  }\n};\n\n// We export \"client\" for hydration error-free parts,\n// like touch directives who do not (and must NOT) wait\n// for the client takeover;\n// Do NOT import this directly in your app, unless you really know\n// what you are doing.\nexport const client = __QUASAR_SSR_SERVER__ ? ssrClient : {\n  userAgent,\n  is: getPlatform(userAgent),\n  has: {\n    touch: hasTouch\n  },\n  within: {\n    iframe: window.self !== window.top\n  }\n};\nconst Platform = {\n  install(opts) {\n    const {\n      $q\n    } = opts;\n    if (__QUASAR_SSR_SERVER__) {\n      $q.platform = this.parseSSR(opts.ssrContext);\n    } else if (isRuntimeSsrPreHydration.value === true) {\n      // takeover should increase accuracy for\n      // the rest of the props; we also avoid\n      // hydration errors\n      opts.onSSRHydrated.push(() => {\n        Object.assign($q.platform, client);\n        isRuntimeSsrPreHydration.value = false;\n      });\n\n      // we need to make platform reactive\n      // for the takeover phase\n      $q.platform = reactive(this);\n    } else {\n      $q.platform = this;\n    }\n  }\n};\nif (__QUASAR_SSR_SERVER__) {\n  Platform.parseSSR = ssrContext => {\n    const userAgent = ssrContext.req.headers['user-agent'] || ssrContext.req.headers['User-Agent'] || '';\n    return {\n      ...client,\n      userAgent,\n      is: getPlatform(userAgent)\n    };\n  };\n} else {\n  // do not access window.localStorage without\n  // devland actually using it as this will get\n  // reported under \"Cookies\" in Google Chrome\n  let hasWebStorage;\n  injectProp(client.has, 'webStorage', () => {\n    if (hasWebStorage !== void 0) {\n      return hasWebStorage;\n    }\n    try {\n      if (window.localStorage) {\n        hasWebStorage = true;\n        return true;\n      }\n    } catch (_) {}\n    hasWebStorage = false;\n    return false;\n  });\n  Object.assign(Platform, client);\n  if (isRuntimeSsrPreHydration.value === true) {\n    // must match with server-side before\n    // client taking over in order to prevent\n    // hydration errors\n    Object.assign(Platform, preHydrationBrowser, ssrClient);\n\n    // free up memory\n    preHydrationBrowser = null;\n  }\n}\nexport default Platform;","map":{"version":3,"names":["ref","reactive","injectProp","isRuntimeSsrPreHydration","__QUASAR_SSR_SERVER__","value","__QUASAR_SSR_CLIENT__","__QUASAR_SSR_PWA__","document","body","getAttribute","preHydrationBrowser","getMatch","userAgent","platformMatch","match","exec","browser","version","platform","getPlatformMatch","hasTouch","window","navigator","maxTouchPoints","getPlatform","UA","toLowerCase","matched","mobile","desktop","cordova","capacitor","nativeMobile","electron","bex","linux","mac","win","cros","chrome","firefox","opera","safari","vivaldi","edge","edgeChromium","ie","webkit","android","ios","ipad","iphone","ipod","kindle","winphone","blackberry","playbook","silk","versionNumber","parseInt","knownMobiles","bb","indexOf","edga","edgios","edg","crios","fxios","opr","name","location","href","Capacitor","nativeMobileWrapper","_cordovaNative","is","Math","min","innerHeight","innerWidth","Object","assign","userAgentData","vendor","ssrClient","has","touch","webStorage","within","iframe","client","self","top","Platform","install","opts","$q","parseSSR","ssrContext","onSSRHydrated","push","req","headers","hasWebStorage","localStorage","_"],"sources":["/app/node_modules/quasar/src/plugins/platform/Platform.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\n\nimport { ref, reactive } from 'vue'\nimport { injectProp } from '../../utils/private.inject-obj-prop/inject-obj-prop.js'\n\n/**\n * __ QUASAR_SSR __            -> runs on SSR on client or server\n * __ QUASAR_SSR_SERVER __     -> runs on SSR on server\n * __ QUASAR_SSR_CLIENT __     -> runs on SSR on client\n * __ QUASAR_SSR_PWA __        -> built with SSR+PWA; may run on SSR on client or on PWA client\n *                              (needs runtime detection)\n */\n\nexport const isRuntimeSsrPreHydration = __QUASAR_SSR_SERVER__\n  ? { value: true }\n  : ref(\n    __QUASAR_SSR_CLIENT__ && (\n      __QUASAR_SSR_PWA__ ? document.body.getAttribute('data-server-rendered') !== null : true\n    )\n  )\n\nlet preHydrationBrowser\n\nfunction getMatch (userAgent, platformMatch) {\n  const match = /(edg|edge|edga|edgios)\\/([\\w.]+)/.exec(userAgent)\n    || /(opr)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(vivaldi)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(chrome|crios)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(version)(applewebkit)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(webkit)[\\/]([\\w.]+).*(version)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(firefox|fxios)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(webkit)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(opera)(?:.*version|)[\\/]([\\w.]+)/.exec(userAgent)\n    || []\n\n  return {\n    browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || '',\n    version: match[ 4 ] || match[ 2 ] || '0',\n    platform: platformMatch[ 0 ] || ''\n  }\n}\n\nfunction getPlatformMatch (userAgent) {\n  return /(ipad)/.exec(userAgent)\n    || /(ipod)/.exec(userAgent)\n    || /(windows phone)/.exec(userAgent)\n    || /(iphone)/.exec(userAgent)\n    || /(kindle)/.exec(userAgent)\n    || /(silk)/.exec(userAgent)\n    || /(android)/.exec(userAgent)\n    || /(win)/.exec(userAgent)\n    || /(mac)/.exec(userAgent)\n    || /(linux)/.exec(userAgent)\n    || /(cros)/.exec(userAgent)\n    // TODO: Remove BlackBerry detection. BlackBerry OS, BlackBerry 10, and BlackBerry PlayBook OS\n    // is officially dead as of January 4, 2022 (https://www.blackberry.com/us/en/support/devices/end-of-life)\n    || /(playbook)/.exec(userAgent)\n    || /(bb)/.exec(userAgent)\n    || /(blackberry)/.exec(userAgent)\n    || []\n}\n\nconst hasTouch = __QUASAR_SSR_SERVER__\n  ? false\n  : 'ontouchstart' in window || window.navigator.maxTouchPoints > 0\n\nfunction getPlatform (UA) {\n  const userAgent = UA.toLowerCase()\n  const platformMatch = getPlatformMatch(userAgent)\n  const matched = getMatch(userAgent, platformMatch)\n  const browser = {\n    mobile: false,\n    desktop: false,\n\n    cordova: false,\n    capacitor: false,\n    nativeMobile: false,\n    // nativeMobileWrapper: void 0,\n    electron: false,\n    bex: false,\n\n    linux: false,\n    mac: false,\n    win: false,\n    cros: false,\n\n    chrome: false,\n    firefox: false,\n    opera: false,\n    safari: false,\n    vivaldi: false,\n    edge: false,\n    edgeChromium: false,\n    ie: false,\n    webkit: false,\n\n    android: false,\n    ios: false,\n    ipad: false,\n    iphone: false,\n    ipod: false,\n    kindle: false,\n    winphone: false,\n    blackberry: false,\n    playbook: false,\n    silk: false\n  }\n\n  if (matched.browser) {\n    browser[ matched.browser ] = true\n    browser.version = matched.version\n    browser.versionNumber = parseInt(matched.version, 10)\n  }\n\n  if (matched.platform) {\n    browser[ matched.platform ] = true\n  }\n\n  const knownMobiles = browser.android\n    || browser.ios\n    || browser.bb\n    || browser.blackberry\n    || browser.ipad\n    || browser.iphone\n    || browser.ipod\n    || browser.kindle\n    || browser.playbook\n    || browser.silk\n    || browser[ 'windows phone' ]\n\n  // These are all considered mobile platforms, meaning they run a mobile browser\n  if (\n    knownMobiles === true\n    || userAgent.indexOf('mobile') !== -1\n  ) {\n    browser.mobile = true\n  }\n  // If it's not mobile we should consider it's desktop platform, meaning it runs a desktop browser\n  // It's a workaround for anonymized user agents\n  // (browser.cros || browser.mac || browser.linux || browser.win)\n  else {\n    browser.desktop = true\n  }\n\n  if (browser[ 'windows phone' ]) {\n    browser.winphone = true\n    delete browser[ 'windows phone' ]\n  }\n\n  if (browser.edga || browser.edgios || browser.edg) {\n    browser.edge = true\n    matched.browser = 'edge'\n  }\n  else if (browser.crios) {\n    browser.chrome = true\n    matched.browser = 'chrome'\n  }\n  else if (browser.fxios) {\n    browser.firefox = true\n    matched.browser = 'firefox'\n  }\n\n  // Set iOS if on iPod, iPad or iPhone\n  if (browser.ipod || browser.ipad || browser.iphone) {\n    browser.ios = true\n  }\n\n  if (browser.vivaldi) {\n    matched.browser = 'vivaldi'\n    browser.vivaldi = true\n  }\n\n  // TODO: The assumption about WebKit based browsers below is not completely accurate.\n  // Google released Blink(a fork of WebKit) engine on April 3, 2013, which is really different than WebKit today.\n  // Today, one might want to check for WebKit to deal with its bugs, which is used on all browsers on iOS, and Safari browser on all platforms.\n  if (\n    // Chrome, Opera 15+, Vivaldi and Safari are webkit based browsers\n    browser.chrome\n    || browser.opr\n    || browser.safari\n    || browser.vivaldi\n    // we expect unknown, non iOS mobile browsers to be webkit based\n    || (\n      browser.mobile === true\n      && browser.ios !== true\n      && knownMobiles !== true\n    )\n  ) {\n    browser.webkit = true\n  }\n\n  // Opera 15+ are identified as opr\n  if (browser.opr) {\n    matched.browser = 'opera'\n    browser.opera = true\n  }\n\n  // Some browsers are marked as Safari but are not\n  if (browser.safari) {\n    if (browser.blackberry || browser.bb) {\n      matched.browser = 'blackberry'\n      browser.blackberry = true\n    }\n    else if (browser.playbook) {\n      matched.browser = 'playbook'\n      browser.playbook = true\n    }\n    else if (browser.android) {\n      matched.browser = 'android'\n      browser.android = true\n    }\n    else if (browser.kindle) {\n      matched.browser = 'kindle'\n      browser.kindle = true\n    }\n    else if (browser.silk) {\n      matched.browser = 'silk'\n      browser.silk = true\n    }\n  }\n\n  // Assign the name and platform variable\n  browser.name = matched.browser\n  browser.platform = matched.platform\n\n  if (__QUASAR_SSR_SERVER__ !== true) {\n    if (userAgent.indexOf('electron') !== -1) {\n      browser.electron = true\n    }\n    else if (document.location.href.indexOf('-extension://') !== -1) {\n      browser.bex = true\n    }\n    else {\n      if (window.Capacitor !== void 0) {\n        browser.capacitor = true\n        browser.nativeMobile = true\n        browser.nativeMobileWrapper = 'capacitor'\n      }\n      else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {\n        browser.cordova = true\n        browser.nativeMobile = true\n        browser.nativeMobileWrapper = 'cordova'\n      }\n\n      if (isRuntimeSsrPreHydration.value === true) {\n        /*\n         * We need to remember the current state as\n         * everything that follows can only be corrected client-side,\n         * but we don't want to brake the hydration.\n         *\n         * The \"client\" object is imported throughout the UI and should\n         * be as accurate as possible given all the knowledge that we posses\n         * because decisions are required to be made immediately, even\n         * before the hydration occurs.\n         */\n        preHydrationBrowser = { is: { ...browser } }\n      }\n\n      /*\n       * All the following should be client-side corrections only\n       */\n\n      if (\n        hasTouch === true\n        && browser.mac === true\n        && (\n          (browser.desktop === true && browser.safari === true)\n          || (\n            browser.nativeMobile === true\n            && browser.android !== true\n            && browser.ios !== true\n            && browser.ipad !== true\n          )\n        )\n      ) {\n        /*\n         * Correction needed for iOS since the default\n         * setting on iPad is to request desktop view; if we have\n         * touch support and the user agent says it's a\n         * desktop, we infer that it's an iPhone/iPad with desktop view\n         * so we must fix the false positives\n         */\n\n        delete browser.mac\n        delete browser.desktop\n\n        const platform = Math.min(window.innerHeight, window.innerWidth) > 414\n          ? 'ipad'\n          : 'iphone'\n\n        Object.assign(browser, {\n          mobile: true,\n          ios: true,\n          platform,\n          [ platform ]: true\n        })\n      }\n\n      if (\n        browser.mobile !== true\n        && window.navigator.userAgentData\n        && window.navigator.userAgentData.mobile\n      ) {\n        /*\n         * Correction needed on client-side when\n         * we also have the navigator userAgentData\n         */\n\n        delete browser.desktop\n        browser.mobile = true\n      }\n    }\n  }\n\n  return browser\n}\n\nconst userAgent = __QUASAR_SSR_SERVER__\n  ? ''\n  : navigator.userAgent || navigator.vendor || window.opera\n\nconst ssrClient = {\n  has: {\n    touch: false,\n    webStorage: false\n  },\n  within: { iframe: false }\n}\n\n// We export \"client\" for hydration error-free parts,\n// like touch directives who do not (and must NOT) wait\n// for the client takeover;\n// Do NOT import this directly in your app, unless you really know\n// what you are doing.\nexport const client = __QUASAR_SSR_SERVER__\n  ? ssrClient\n  : {\n      userAgent,\n      is: getPlatform(userAgent),\n      has: {\n        touch: hasTouch\n      },\n      within: {\n        iframe: window.self !== window.top\n      }\n    }\n\nconst Platform = {\n  install (opts) {\n    const { $q } = opts\n\n    if (__QUASAR_SSR_SERVER__) {\n      $q.platform = this.parseSSR(opts.ssrContext)\n    }\n    else if (isRuntimeSsrPreHydration.value === true) {\n      // takeover should increase accuracy for\n      // the rest of the props; we also avoid\n      // hydration errors\n      opts.onSSRHydrated.push(() => {\n        Object.assign($q.platform, client)\n        isRuntimeSsrPreHydration.value = false\n      })\n\n      // we need to make platform reactive\n      // for the takeover phase\n      $q.platform = reactive(this)\n    }\n    else {\n      $q.platform = this\n    }\n  }\n}\n\nif (__QUASAR_SSR_SERVER__) {\n  Platform.parseSSR = (ssrContext) => {\n    const userAgent = ssrContext.req.headers[ 'user-agent' ] || ssrContext.req.headers[ 'User-Agent' ] || ''\n    return {\n      ...client,\n      userAgent,\n      is: getPlatform(userAgent)\n    }\n  }\n}\nelse {\n  // do not access window.localStorage without\n  // devland actually using it as this will get\n  // reported under \"Cookies\" in Google Chrome\n  let hasWebStorage\n\n  injectProp(client.has, 'webStorage', () => {\n    if (hasWebStorage !== void 0) {\n      return hasWebStorage\n    }\n\n    try {\n      if (window.localStorage) {\n        hasWebStorage = true\n        return true\n      }\n    }\n    catch (_) {}\n\n    hasWebStorage = false\n    return false\n  })\n\n  Object.assign(Platform, client)\n\n  if (isRuntimeSsrPreHydration.value === true) {\n    // must match with server-side before\n    // client taking over in order to prevent\n    // hydration errors\n    Object.assign(Platform, preHydrationBrowser, ssrClient)\n\n    // free up memory\n    preHydrationBrowser = null\n  }\n}\n\nexport default Platform\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}