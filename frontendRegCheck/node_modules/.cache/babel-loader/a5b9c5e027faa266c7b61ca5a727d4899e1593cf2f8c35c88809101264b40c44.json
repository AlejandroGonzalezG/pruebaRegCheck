{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { h, ref, computed, watch, getCurrentInstance } from 'vue';\nimport QTh from './QTh.js';\nimport QSeparator from '../separator/QSeparator.js';\nimport QIcon from '../icon/QIcon.js';\nimport QVirtualScroll from '../virtual-scroll/QVirtualScroll.js';\nimport QSelect from '../select/QSelect.js';\nimport QLinearProgress from '../linear-progress/QLinearProgress.js';\nimport QCheckbox from '../checkbox/QCheckbox.js';\nimport QBtn from '../btn/QBtn.js';\nimport getTableMiddle from './get-table-middle.js';\nimport useDark, { useDarkProps } from '../../composables/private.use-dark/use-dark.js';\nimport { commonVirtScrollPropsList } from '../virtual-scroll/use-virtual-scroll.js';\nimport useFullscreen, { useFullscreenProps, useFullscreenEmits } from '../../composables/private.use-fullscreen/use-fullscreen.js';\nimport { useTableSort, useTableSortProps } from './table-sort.js';\nimport { useTableFilter, useTableFilterProps } from './table-filter.js';\nimport { useTablePaginationState, useTablePagination, useTablePaginationProps } from './table-pagination.js';\nimport { useTableRowSelection, useTableRowSelectionProps, useTableRowSelectionEmits } from './table-row-selection.js';\nimport { useTableRowExpand, useTableRowExpandProps, useTableRowExpandEmits } from './table-row-expand.js';\nimport { useTableColumnSelection, useTableColumnSelectionProps } from './table-column-selection.js';\nimport { injectProp, injectMultipleProps } from '../../utils/private.inject-obj-prop/inject-obj-prop.js';\nimport { createComponent } from '../../utils/private.create/create.js';\nconst bottomClass = 'q-table__bottom row items-center';\nconst virtScrollPassthroughProps = {};\ncommonVirtScrollPropsList.forEach(p => {\n  virtScrollPassthroughProps[p] = {};\n});\nexport default createComponent({\n  name: 'QTable',\n  props: {\n    rows: {\n      type: Array,\n      required: true\n    },\n    rowKey: {\n      type: [String, Function],\n      default: 'id'\n    },\n    columns: Array,\n    loading: Boolean,\n    iconFirstPage: String,\n    iconPrevPage: String,\n    iconNextPage: String,\n    iconLastPage: String,\n    title: String,\n    hideHeader: Boolean,\n    grid: Boolean,\n    gridHeader: Boolean,\n    dense: Boolean,\n    flat: Boolean,\n    bordered: Boolean,\n    square: Boolean,\n    separator: {\n      type: String,\n      default: 'horizontal',\n      validator: v => ['horizontal', 'vertical', 'cell', 'none'].includes(v)\n    },\n    wrapCells: Boolean,\n    virtualScroll: Boolean,\n    virtualScrollTarget: {},\n    ...virtScrollPassthroughProps,\n    noDataLabel: String,\n    noResultsLabel: String,\n    loadingLabel: String,\n    selectedRowsLabel: Function,\n    rowsPerPageLabel: String,\n    paginationLabel: Function,\n    color: {\n      type: String,\n      default: 'grey-8'\n    },\n    titleClass: [String, Array, Object],\n    tableStyle: [String, Array, Object],\n    tableClass: [String, Array, Object],\n    tableHeaderStyle: [String, Array, Object],\n    tableHeaderClass: [String, Array, Object],\n    cardContainerClass: [String, Array, Object],\n    cardContainerStyle: [String, Array, Object],\n    cardStyle: [String, Array, Object],\n    cardClass: [String, Array, Object],\n    hideBottom: Boolean,\n    hideSelectedBanner: Boolean,\n    hideNoData: Boolean,\n    hidePagination: Boolean,\n    onRowClick: Function,\n    onRowDblclick: Function,\n    onRowContextmenu: Function,\n    ...useDarkProps,\n    ...useFullscreenProps,\n    ...useTableColumnSelectionProps,\n    ...useTableFilterProps,\n    ...useTablePaginationProps,\n    ...useTableRowExpandProps,\n    ...useTableRowSelectionProps,\n    ...useTableSortProps\n  },\n  emits: ['request', 'virtualScroll', ...useFullscreenEmits, ...useTableRowExpandEmits, ...useTableRowSelectionEmits],\n  setup(props, {\n    slots,\n    emit\n  }) {\n    const vm = getCurrentInstance();\n    const {\n      proxy: {\n        $q\n      }\n    } = vm;\n    const isDark = useDark(props, $q);\n    const {\n      inFullscreen,\n      toggleFullscreen\n    } = useFullscreen();\n    const getRowKey = computed(() => typeof props.rowKey === 'function' ? props.rowKey : row => row[props.rowKey]);\n    const rootRef = ref(null);\n    const virtScrollRef = ref(null);\n    const hasVirtScroll = computed(() => props.grid !== true && props.virtualScroll === true);\n    const cardDefaultClass = computed(() => ' q-table__card' + (isDark.value === true ? ' q-table__card--dark q-dark' : '') + (props.square === true ? ' q-table--square' : '') + (props.flat === true ? ' q-table--flat' : '') + (props.bordered === true ? ' q-table--bordered' : ''));\n    const __containerClass = computed(() => `q-table__container q-table--${props.separator}-separator column no-wrap` + (props.grid === true ? ' q-table--grid' : cardDefaultClass.value) + (isDark.value === true ? ' q-table--dark' : '') + (props.dense === true ? ' q-table--dense' : '') + (props.wrapCells === false ? ' q-table--no-wrap' : '') + (inFullscreen.value === true ? ' fullscreen scroll' : ''));\n    const containerClass = computed(() => __containerClass.value + (props.loading === true ? ' q-table--loading' : ''));\n    watch(() => props.tableStyle + props.tableClass + props.tableHeaderStyle + props.tableHeaderClass + __containerClass.value, () => {\n      hasVirtScroll.value === true && virtScrollRef.value !== null && virtScrollRef.value.reset();\n    });\n    const {\n      innerPagination,\n      computedPagination,\n      isServerSide,\n      requestServerInteraction,\n      setPagination\n    } = useTablePaginationState(vm, getCellValue);\n    const {\n      computedFilterMethod\n    } = useTableFilter(props, setPagination);\n    const {\n      isRowExpanded,\n      setExpanded,\n      updateExpanded\n    } = useTableRowExpand(props, emit);\n    const filteredSortedRows = computed(() => {\n      let rows = props.rows;\n      if (isServerSide.value === true || rows.length === 0) {\n        return rows;\n      }\n      const {\n        sortBy,\n        descending\n      } = computedPagination.value;\n      if (props.filter) {\n        rows = computedFilterMethod.value(rows, props.filter, computedCols.value, getCellValue);\n      }\n      if (columnToSort.value !== null) {\n        rows = computedSortMethod.value(props.rows === rows ? rows.slice() : rows, sortBy, descending);\n      }\n      return rows;\n    });\n    const filteredSortedRowsNumber = computed(() => filteredSortedRows.value.length);\n    const computedRows = computed(() => {\n      let rows = filteredSortedRows.value;\n      if (isServerSide.value === true) {\n        return rows;\n      }\n      const {\n        rowsPerPage\n      } = computedPagination.value;\n      if (rowsPerPage !== 0) {\n        if (firstRowIndex.value === 0 && props.rows !== rows) {\n          if (rows.length > lastRowIndex.value) {\n            rows = rows.slice(0, lastRowIndex.value);\n          }\n        } else {\n          rows = rows.slice(firstRowIndex.value, lastRowIndex.value);\n        }\n      }\n      return rows;\n    });\n    const {\n      hasSelectionMode,\n      singleSelection,\n      multipleSelection,\n      allRowsSelected,\n      someRowsSelected,\n      rowsSelectedNumber,\n      isRowSelected,\n      clearSelection,\n      updateSelection\n    } = useTableRowSelection(props, emit, computedRows, getRowKey);\n    const {\n      colList,\n      computedCols,\n      computedColsMap,\n      computedColspan\n    } = useTableColumnSelection(props, computedPagination, hasSelectionMode);\n    const {\n      columnToSort,\n      computedSortMethod,\n      sort\n    } = useTableSort(props, computedPagination, colList, setPagination);\n    const {\n      firstRowIndex,\n      lastRowIndex,\n      isFirstPage,\n      isLastPage,\n      pagesNumber,\n      computedRowsPerPageOptions,\n      computedRowsNumber,\n      firstPage,\n      prevPage,\n      nextPage,\n      lastPage\n    } = useTablePagination(vm, innerPagination, computedPagination, isServerSide, setPagination, filteredSortedRowsNumber);\n    const nothingToDisplay = computed(() => computedRows.value.length === 0);\n    const virtProps = computed(() => {\n      const acc = {};\n      commonVirtScrollPropsList.forEach(p => {\n        acc[p] = props[p];\n      });\n      if (acc.virtualScrollItemSize === void 0) {\n        acc.virtualScrollItemSize = props.dense === true ? 28 : 48;\n      }\n      return acc;\n    });\n    function resetVirtualScroll() {\n      hasVirtScroll.value === true && virtScrollRef.value.reset();\n    }\n    function getBody() {\n      if (props.grid === true) {\n        return getGridBody();\n      }\n      const header = props.hideHeader !== true ? getTHead : null;\n      if (hasVirtScroll.value === true) {\n        const topRow = slots['top-row'];\n        const bottomRow = slots['bottom-row'];\n        const virtSlots = {\n          default: props => getTBodyTR(props.item, slots.body, props.index)\n        };\n        if (topRow !== void 0) {\n          const topContent = h('tbody', topRow({\n            cols: computedCols.value\n          }));\n          virtSlots.before = header === null ? () => topContent : () => [header()].concat(topContent);\n        } else if (header !== null) {\n          virtSlots.before = header;\n        }\n        if (bottomRow !== void 0) {\n          virtSlots.after = () => h('tbody', bottomRow({\n            cols: computedCols.value\n          }));\n        }\n        return h(QVirtualScroll, {\n          ref: virtScrollRef,\n          class: props.tableClass,\n          style: props.tableStyle,\n          ...virtProps.value,\n          scrollTarget: props.virtualScrollTarget,\n          items: computedRows.value,\n          type: '__qtable',\n          tableColspan: computedColspan.value,\n          onVirtualScroll: onVScroll\n        }, virtSlots);\n      }\n      const child = [getTBody()];\n      if (header !== null) {\n        child.unshift(header());\n      }\n      return getTableMiddle({\n        class: ['q-table__middle scroll', props.tableClass],\n        style: props.tableStyle\n      }, child);\n    }\n    function scrollTo(toIndex, edge) {\n      if (virtScrollRef.value !== null) {\n        virtScrollRef.value.scrollTo(toIndex, edge);\n        return;\n      }\n      toIndex = parseInt(toIndex, 10);\n      const rowEl = rootRef.value.querySelector(`tbody tr:nth-of-type(${toIndex + 1})`);\n      if (rowEl !== null) {\n        const scrollTarget = rootRef.value.querySelector('.q-table__middle.scroll');\n        const offsetTop = rowEl.offsetTop - props.virtualScrollStickySizeStart;\n        const direction = offsetTop < scrollTarget.scrollTop ? 'decrease' : 'increase';\n        scrollTarget.scrollTop = offsetTop;\n        emit('virtualScroll', {\n          index: toIndex,\n          from: 0,\n          to: innerPagination.value.rowsPerPage - 1,\n          direction\n        });\n      }\n    }\n    function onVScroll(info) {\n      emit('virtualScroll', info);\n    }\n    function getProgress() {\n      return [h(QLinearProgress, {\n        class: 'q-table__linear-progress',\n        color: props.color,\n        dark: isDark.value,\n        indeterminate: true,\n        trackColor: 'transparent'\n      })];\n    }\n    function getTBodyTR(row, bodySlot, pageIndex) {\n      const key = getRowKey.value(row),\n        selected = isRowSelected(key);\n      if (bodySlot !== void 0) {\n        return bodySlot(getBodyScope({\n          key,\n          row,\n          pageIndex,\n          __trClass: selected ? 'selected' : ''\n        }));\n      }\n      const bodyCell = slots['body-cell'],\n        child = computedCols.value.map(col => {\n          const bodyCellCol = slots[`body-cell-${col.name}`],\n            slot = bodyCellCol !== void 0 ? bodyCellCol : bodyCell;\n          return slot !== void 0 ? slot(getBodyCellScope({\n            key,\n            row,\n            pageIndex,\n            col\n          })) : h('td', {\n            class: col.__tdClass(row),\n            style: col.__tdStyle(row)\n          }, getCellValue(col, row));\n        });\n      if (hasSelectionMode.value === true) {\n        const slot = slots['body-selection'];\n        const content = slot !== void 0 ? slot(getBodySelectionScope({\n          key,\n          row,\n          pageIndex\n        })) : [h(QCheckbox, {\n          modelValue: selected,\n          color: props.color,\n          dark: isDark.value,\n          dense: props.dense,\n          'onUpdate:modelValue': (adding, evt) => {\n            updateSelection([key], [row], adding, evt);\n          }\n        })];\n        child.unshift(h('td', {\n          class: 'q-table--col-auto-width'\n        }, content));\n      }\n      const data = {\n        key,\n        class: {\n          selected\n        }\n      };\n      if (props.onRowClick !== void 0) {\n        data.class['cursor-pointer'] = true;\n        data.onClick = evt => {\n          emit('rowClick', evt, row, pageIndex);\n        };\n      }\n      if (props.onRowDblclick !== void 0) {\n        data.class['cursor-pointer'] = true;\n        data.onDblclick = evt => {\n          emit('rowDblclick', evt, row, pageIndex);\n        };\n      }\n      if (props.onRowContextmenu !== void 0) {\n        data.class['cursor-pointer'] = true;\n        data.onContextmenu = evt => {\n          emit('rowContextmenu', evt, row, pageIndex);\n        };\n      }\n      return h('tr', data, child);\n    }\n    function getTBody() {\n      const body = slots.body,\n        topRow = slots['top-row'],\n        bottomRow = slots['bottom-row'];\n      let child = computedRows.value.map((row, pageIndex) => getTBodyTR(row, body, pageIndex));\n      if (topRow !== void 0) {\n        child = topRow({\n          cols: computedCols.value\n        }).concat(child);\n      }\n      if (bottomRow !== void 0) {\n        child = child.concat(bottomRow({\n          cols: computedCols.value\n        }));\n      }\n      return h('tbody', child);\n    }\n    function getBodyScope(data) {\n      injectBodyCommonScope(data);\n      data.cols = data.cols.map(col => injectProp({\n        ...col\n      }, 'value', () => getCellValue(col, data.row)));\n      return data;\n    }\n    function getBodyCellScope(data) {\n      injectBodyCommonScope(data);\n      injectProp(data, 'value', () => getCellValue(data.col, data.row));\n      return data;\n    }\n    function getBodySelectionScope(data) {\n      injectBodyCommonScope(data);\n      return data;\n    }\n    function injectBodyCommonScope(data) {\n      Object.assign(data, {\n        cols: computedCols.value,\n        colsMap: computedColsMap.value,\n        sort,\n        rowIndex: firstRowIndex.value + data.pageIndex,\n        color: props.color,\n        dark: isDark.value,\n        dense: props.dense\n      });\n      hasSelectionMode.value === true && injectProp(data, 'selected', () => isRowSelected(data.key), (adding, evt) => {\n        updateSelection([data.key], [data.row], adding, evt);\n      });\n      injectProp(data, 'expand', () => isRowExpanded(data.key), adding => {\n        updateExpanded(data.key, adding);\n      });\n    }\n    function getCellValue(col, row) {\n      const val = typeof col.field === 'function' ? col.field(row) : row[col.field];\n      return col.format !== void 0 ? col.format(val, row) : val;\n    }\n    const marginalsScope = computed(() => ({\n      pagination: computedPagination.value,\n      pagesNumber: pagesNumber.value,\n      isFirstPage: isFirstPage.value,\n      isLastPage: isLastPage.value,\n      firstPage,\n      prevPage,\n      nextPage,\n      lastPage,\n      inFullscreen: inFullscreen.value,\n      toggleFullscreen\n    }));\n    function getTopDiv() {\n      const top = slots.top,\n        topLeft = slots['top-left'],\n        topRight = slots['top-right'],\n        topSelection = slots['top-selection'],\n        hasSelection = hasSelectionMode.value === true && topSelection !== void 0 && rowsSelectedNumber.value > 0,\n        topClass = 'q-table__top relative-position row items-center';\n      if (top !== void 0) {\n        return h('div', {\n          class: topClass\n        }, [top(marginalsScope.value)]);\n      }\n      let child;\n      if (hasSelection === true) {\n        child = topSelection(marginalsScope.value).slice();\n      } else {\n        child = [];\n        if (topLeft !== void 0) {\n          child.push(h('div', {\n            class: 'q-table__control'\n          }, [topLeft(marginalsScope.value)]));\n        } else if (props.title) {\n          child.push(h('div', {\n            class: 'q-table__control'\n          }, [h('div', {\n            class: ['q-table__title', props.titleClass]\n          }, props.title)]));\n        }\n      }\n      if (topRight !== void 0) {\n        child.push(h('div', {\n          class: 'q-table__separator col'\n        }));\n        child.push(h('div', {\n          class: 'q-table__control'\n        }, [topRight(marginalsScope.value)]));\n      }\n      if (child.length === 0) return;\n      return h('div', {\n        class: topClass\n      }, child);\n    }\n    const headerSelectedValue = computed(() => someRowsSelected.value === true ? null : allRowsSelected.value);\n    function getTHead() {\n      const child = getTHeadTR();\n      if (props.loading === true && slots.loading === void 0) {\n        child.push(h('tr', {\n          class: 'q-table__progress'\n        }, [h('th', {\n          class: 'relative-position',\n          colspan: computedColspan.value\n        }, getProgress())]));\n      }\n      return h('thead', child);\n    }\n    function getTHeadTR() {\n      const header = slots.header,\n        headerCell = slots['header-cell'];\n      if (header !== void 0) {\n        return header(getHeaderScope({\n          header: true\n        })).slice();\n      }\n      const child = computedCols.value.map(col => {\n        const headerCellCol = slots[`header-cell-${col.name}`],\n          slot = headerCellCol !== void 0 ? headerCellCol : headerCell,\n          props = getHeaderScope({\n            col\n          });\n        return slot !== void 0 ? slot(props) : h(QTh, {\n          key: col.name,\n          props\n        }, () => col.label);\n      });\n      if (singleSelection.value === true && props.grid !== true) {\n        child.unshift(h('th', {\n          class: 'q-table--col-auto-width'\n        }, ' '));\n      } else if (multipleSelection.value === true) {\n        const slot = slots['header-selection'];\n        const content = slot !== void 0 ? slot(getHeaderScope({})) : [h(QCheckbox, {\n          color: props.color,\n          modelValue: headerSelectedValue.value,\n          dark: isDark.value,\n          dense: props.dense,\n          'onUpdate:modelValue': onMultipleSelectionSet\n        })];\n        child.unshift(h('th', {\n          class: 'q-table--col-auto-width'\n        }, content));\n      }\n      return [h('tr', {\n        class: props.tableHeaderClass,\n        style: props.tableHeaderStyle\n      }, child)];\n    }\n    function getHeaderScope(data) {\n      Object.assign(data, {\n        cols: computedCols.value,\n        sort,\n        colsMap: computedColsMap.value,\n        color: props.color,\n        dark: isDark.value,\n        dense: props.dense\n      });\n      if (multipleSelection.value === true) {\n        injectProp(data, 'selected', () => headerSelectedValue.value, onMultipleSelectionSet);\n      }\n      return data;\n    }\n    function onMultipleSelectionSet(val) {\n      if (someRowsSelected.value === true) {\n        val = false;\n      }\n      updateSelection(computedRows.value.map(getRowKey.value), computedRows.value, val);\n    }\n    const navIcon = computed(() => {\n      const ico = [props.iconFirstPage || $q.iconSet.table.firstPage, props.iconPrevPage || $q.iconSet.table.prevPage, props.iconNextPage || $q.iconSet.table.nextPage, props.iconLastPage || $q.iconSet.table.lastPage];\n      return $q.lang.rtl === true ? ico.reverse() : ico;\n    });\n    function getBottomDiv() {\n      if (props.hideBottom === true) return;\n      if (nothingToDisplay.value === true) {\n        if (props.hideNoData === true) return;\n        const message = props.loading === true ? props.loadingLabel || $q.lang.table.loading : props.filter ? props.noResultsLabel || $q.lang.table.noResults : props.noDataLabel || $q.lang.table.noData;\n        const noData = slots['no-data'];\n        const children = noData !== void 0 ? [noData({\n          message,\n          icon: $q.iconSet.table.warning,\n          filter: props.filter\n        })] : [h(QIcon, {\n          class: 'q-table__bottom-nodata-icon',\n          name: $q.iconSet.table.warning\n        }), message];\n        return h('div', {\n          class: bottomClass + ' q-table__bottom--nodata'\n        }, children);\n      }\n      const bottom = slots.bottom;\n      if (bottom !== void 0) {\n        return h('div', {\n          class: bottomClass\n        }, [bottom(marginalsScope.value)]);\n      }\n      const child = props.hideSelectedBanner !== true && hasSelectionMode.value === true && rowsSelectedNumber.value > 0 ? [h('div', {\n        class: 'q-table__control'\n      }, [h('div', [(props.selectedRowsLabel || $q.lang.table.selectedRecords)(rowsSelectedNumber.value)])])] : [];\n      if (props.hidePagination !== true) {\n        return h('div', {\n          class: bottomClass + ' justify-end'\n        }, getPaginationDiv(child));\n      }\n      if (child.length !== 0) {\n        return h('div', {\n          class: bottomClass\n        }, child);\n      }\n    }\n    function onPagSelection(pag) {\n      setPagination({\n        page: 1,\n        rowsPerPage: pag.value\n      });\n    }\n    function getPaginationDiv(child) {\n      let control;\n      const {\n          rowsPerPage\n        } = computedPagination.value,\n        paginationLabel = props.paginationLabel || $q.lang.table.pagination,\n        paginationSlot = slots.pagination,\n        hasOpts = props.rowsPerPageOptions.length > 1;\n      child.push(h('div', {\n        class: 'q-table__separator col'\n      }));\n      if (hasOpts === true) {\n        child.push(h('div', {\n          class: 'q-table__control'\n        }, [h('span', {\n          class: 'q-table__bottom-item'\n        }, [props.rowsPerPageLabel || $q.lang.table.recordsPerPage]), h(QSelect, {\n          class: 'q-table__select inline q-table__bottom-item',\n          color: props.color,\n          modelValue: rowsPerPage,\n          options: computedRowsPerPageOptions.value,\n          displayValue: rowsPerPage === 0 ? $q.lang.table.allRows : rowsPerPage,\n          dark: isDark.value,\n          borderless: true,\n          dense: true,\n          optionsDense: true,\n          optionsCover: true,\n          'onUpdate:modelValue': onPagSelection\n        })]));\n      }\n      if (paginationSlot !== void 0) {\n        control = paginationSlot(marginalsScope.value);\n      } else {\n        control = [h('span', rowsPerPage !== 0 ? {\n          class: 'q-table__bottom-item'\n        } : {}, [rowsPerPage ? paginationLabel(firstRowIndex.value + 1, Math.min(lastRowIndex.value, computedRowsNumber.value), computedRowsNumber.value) : paginationLabel(1, filteredSortedRowsNumber.value, computedRowsNumber.value)])];\n        if (rowsPerPage !== 0 && pagesNumber.value > 1) {\n          const btnProps = {\n            color: props.color,\n            round: true,\n            dense: true,\n            flat: true\n          };\n          if (props.dense === true) {\n            btnProps.size = 'sm';\n          }\n          pagesNumber.value > 2 && control.push(h(QBtn, {\n            key: 'pgFirst',\n            ...btnProps,\n            icon: navIcon.value[0],\n            disable: isFirstPage.value,\n            onClick: firstPage\n          }));\n          control.push(h(QBtn, {\n            key: 'pgPrev',\n            ...btnProps,\n            icon: navIcon.value[1],\n            disable: isFirstPage.value,\n            onClick: prevPage\n          }), h(QBtn, {\n            key: 'pgNext',\n            ...btnProps,\n            icon: navIcon.value[2],\n            disable: isLastPage.value,\n            onClick: nextPage\n          }));\n          pagesNumber.value > 2 && control.push(h(QBtn, {\n            key: 'pgLast',\n            ...btnProps,\n            icon: navIcon.value[3],\n            disable: isLastPage.value,\n            onClick: lastPage\n          }));\n        }\n      }\n      child.push(h('div', {\n        class: 'q-table__control'\n      }, control));\n      return child;\n    }\n    function getGridHeader() {\n      const child = props.gridHeader === true ? [h('table', {\n        class: 'q-table'\n      }, [getTHead(h)])] : props.loading === true && slots.loading === void 0 ? getProgress(h) : void 0;\n      return h('div', {\n        class: 'q-table__middle'\n      }, child);\n    }\n    function getGridBody() {\n      const item = slots.item !== void 0 ? slots.item : scope => {\n        const child = scope.cols.map(col => h('div', {\n          class: 'q-table__grid-item-row'\n        }, [h('div', {\n          class: 'q-table__grid-item-title'\n        }, [col.label]), h('div', {\n          class: 'q-table__grid-item-value'\n        }, [col.value])]));\n        if (hasSelectionMode.value === true) {\n          const slot = slots['body-selection'];\n          const content = slot !== void 0 ? slot(scope) : [h(QCheckbox, {\n            modelValue: scope.selected,\n            color: props.color,\n            dark: isDark.value,\n            dense: props.dense,\n            'onUpdate:modelValue': (adding, evt) => {\n              updateSelection([scope.key], [scope.row], adding, evt);\n            }\n          })];\n          child.unshift(h('div', {\n            class: 'q-table__grid-item-row'\n          }, content), h(QSeparator, {\n            dark: isDark.value\n          }));\n        }\n        const data = {\n          class: ['q-table__grid-item-card' + cardDefaultClass.value, props.cardClass],\n          style: props.cardStyle\n        };\n        if (props.onRowClick !== void 0 || props.onRowDblclick !== void 0) {\n          data.class[0] += ' cursor-pointer';\n          if (props.onRowClick !== void 0) {\n            data.onClick = evt => {\n              emit('RowClick', evt, scope.row, scope.pageIndex);\n            };\n          }\n          if (props.onRowDblclick !== void 0) {\n            data.onDblclick = evt => {\n              emit('RowDblclick', evt, scope.row, scope.pageIndex);\n            };\n          }\n        }\n        return h('div', {\n          class: 'q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3' + (scope.selected === true ? ' q-table__grid-item--selected' : '')\n        }, [h('div', data, child)]);\n      };\n      return h('div', {\n        class: ['q-table__grid-content row', props.cardContainerClass],\n        style: props.cardContainerStyle\n      }, computedRows.value.map((row, pageIndex) => {\n        return item(getBodyScope({\n          key: getRowKey.value(row),\n          row,\n          pageIndex\n        }));\n      }));\n    }\n\n    // expose public methods and needed computed props\n    Object.assign(vm.proxy, {\n      requestServerInteraction,\n      setPagination,\n      firstPage,\n      prevPage,\n      nextPage,\n      lastPage,\n      isRowSelected,\n      clearSelection,\n      isRowExpanded,\n      setExpanded,\n      sort,\n      resetVirtualScroll,\n      scrollTo,\n      getCellValue\n    });\n    injectMultipleProps(vm.proxy, {\n      filteredSortedRows: () => filteredSortedRows.value,\n      computedRows: () => computedRows.value,\n      computedRowsNumber: () => computedRowsNumber.value\n    });\n    return () => {\n      const child = [getTopDiv()];\n      const data = {\n        ref: rootRef,\n        class: containerClass.value\n      };\n      if (props.grid === true) {\n        child.push(getGridHeader());\n      } else {\n        Object.assign(data, {\n          class: [data.class, props.cardClass],\n          style: props.cardStyle\n        });\n      }\n      child.push(getBody(), getBottomDiv());\n      if (props.loading === true && slots.loading !== void 0) {\n        child.push(slots.loading());\n      }\n      return h('div', data, child);\n    };\n  }\n});","map":{"version":3,"names":["h","ref","computed","watch","getCurrentInstance","QTh","QSeparator","QIcon","QVirtualScroll","QSelect","QLinearProgress","QCheckbox","QBtn","getTableMiddle","useDark","useDarkProps","commonVirtScrollPropsList","useFullscreen","useFullscreenProps","useFullscreenEmits","useTableSort","useTableSortProps","useTableFilter","useTableFilterProps","useTablePaginationState","useTablePagination","useTablePaginationProps","useTableRowSelection","useTableRowSelectionProps","useTableRowSelectionEmits","useTableRowExpand","useTableRowExpandProps","useTableRowExpandEmits","useTableColumnSelection","useTableColumnSelectionProps","injectProp","injectMultipleProps","createComponent","bottomClass","virtScrollPassthroughProps","forEach","p","name","props","rows","type","Array","required","rowKey","String","Function","default","columns","loading","Boolean","iconFirstPage","iconPrevPage","iconNextPage","iconLastPage","title","hideHeader","grid","gridHeader","dense","flat","bordered","square","separator","validator","v","includes","wrapCells","virtualScroll","virtualScrollTarget","noDataLabel","noResultsLabel","loadingLabel","selectedRowsLabel","rowsPerPageLabel","paginationLabel","color","titleClass","Object","tableStyle","tableClass","tableHeaderStyle","tableHeaderClass","cardContainerClass","cardContainerStyle","cardStyle","cardClass","hideBottom","hideSelectedBanner","hideNoData","hidePagination","onRowClick","onRowDblclick","onRowContextmenu","emits","setup","slots","emit","vm","proxy","$q","isDark","inFullscreen","toggleFullscreen","getRowKey","row","rootRef","virtScrollRef","hasVirtScroll","cardDefaultClass","value","__containerClass","containerClass","reset","innerPagination","computedPagination","isServerSide","requestServerInteraction","setPagination","getCellValue","computedFilterMethod","isRowExpanded","setExpanded","updateExpanded","filteredSortedRows","length","sortBy","descending","filter","computedCols","columnToSort","computedSortMethod","slice","filteredSortedRowsNumber","computedRows","rowsPerPage","firstRowIndex","lastRowIndex","hasSelectionMode","singleSelection","multipleSelection","allRowsSelected","someRowsSelected","rowsSelectedNumber","isRowSelected","clearSelection","updateSelection","colList","computedColsMap","computedColspan","sort","isFirstPage","isLastPage","pagesNumber","computedRowsPerPageOptions","computedRowsNumber","firstPage","prevPage","nextPage","lastPage","nothingToDisplay","virtProps","acc","virtualScrollItemSize","resetVirtualScroll","getBody","getGridBody","header","getTHead","topRow","bottomRow","virtSlots","getTBodyTR","item","body","index","topContent","cols","before","concat","after","class","style","scrollTarget","items","tableColspan","onVirtualScroll","onVScroll","child","getTBody","unshift","scrollTo","toIndex","edge","parseInt","rowEl","querySelector","offsetTop","virtualScrollStickySizeStart","direction","scrollTop","from","to","info","getProgress","dark","indeterminate","trackColor","bodySlot","pageIndex","key","selected","getBodyScope","__trClass","bodyCell","map","col","bodyCellCol","slot","getBodyCellScope","__tdClass","__tdStyle","content","getBodySelectionScope","modelValue","onUpdate:modelValue","adding","evt","data","onClick","onDblclick","onContextmenu","injectBodyCommonScope","assign","colsMap","rowIndex","val","field","format","marginalsScope","pagination","getTopDiv","top","topLeft","topRight","topSelection","hasSelection","topClass","push","headerSelectedValue","getTHeadTR","colspan","headerCell","getHeaderScope","headerCellCol","label","onMultipleSelectionSet","navIcon","ico","iconSet","table","lang","rtl","reverse","getBottomDiv","message","noResults","noData","children","icon","warning","bottom","selectedRecords","getPaginationDiv","onPagSelection","pag","page","control","paginationSlot","hasOpts","rowsPerPageOptions","recordsPerPage","options","displayValue","allRows","borderless","optionsDense","optionsCover","Math","min","btnProps","round","size","disable","getGridHeader","scope"],"sources":["/app/node_modules/quasar/src/components/table/QTable.js"],"sourcesContent":["import { h, ref, computed, watch, getCurrentInstance } from 'vue'\n\nimport QTh from './QTh.js'\n\nimport QSeparator from '../separator/QSeparator.js'\nimport QIcon from '../icon/QIcon.js'\nimport QVirtualScroll from '../virtual-scroll/QVirtualScroll.js'\nimport QSelect from '../select/QSelect.js'\nimport QLinearProgress from '../linear-progress/QLinearProgress.js'\nimport QCheckbox from '../checkbox/QCheckbox.js'\nimport QBtn from '../btn/QBtn.js'\n\nimport getTableMiddle from './get-table-middle.js'\n\nimport useDark, { useDarkProps } from '../../composables/private.use-dark/use-dark.js'\nimport { commonVirtScrollPropsList } from '../virtual-scroll/use-virtual-scroll.js'\nimport useFullscreen, { useFullscreenProps, useFullscreenEmits } from '../../composables/private.use-fullscreen/use-fullscreen.js'\n\nimport { useTableSort, useTableSortProps } from './table-sort.js'\nimport { useTableFilter, useTableFilterProps } from './table-filter.js'\nimport { useTablePaginationState, useTablePagination, useTablePaginationProps } from './table-pagination.js'\nimport { useTableRowSelection, useTableRowSelectionProps, useTableRowSelectionEmits } from './table-row-selection.js'\nimport { useTableRowExpand, useTableRowExpandProps, useTableRowExpandEmits } from './table-row-expand.js'\nimport { useTableColumnSelection, useTableColumnSelectionProps } from './table-column-selection.js'\n\nimport { injectProp, injectMultipleProps } from '../../utils/private.inject-obj-prop/inject-obj-prop.js'\nimport { createComponent } from '../../utils/private.create/create.js'\n\nconst bottomClass = 'q-table__bottom row items-center'\n\nconst virtScrollPassthroughProps = {}\ncommonVirtScrollPropsList.forEach(p => { virtScrollPassthroughProps[ p ] = {} })\n\nexport default createComponent({\n  name: 'QTable',\n\n  props: {\n    rows: {\n      type: Array,\n      required: true\n    },\n    rowKey: {\n      type: [ String, Function ],\n      default: 'id'\n    },\n\n    columns: Array,\n    loading: Boolean,\n\n    iconFirstPage: String,\n    iconPrevPage: String,\n    iconNextPage: String,\n    iconLastPage: String,\n\n    title: String,\n\n    hideHeader: Boolean,\n\n    grid: Boolean,\n    gridHeader: Boolean,\n\n    dense: Boolean,\n    flat: Boolean,\n    bordered: Boolean,\n    square: Boolean,\n    separator: {\n      type: String,\n      default: 'horizontal',\n      validator: v => [ 'horizontal', 'vertical', 'cell', 'none' ].includes(v)\n    },\n    wrapCells: Boolean,\n\n    virtualScroll: Boolean,\n    virtualScrollTarget: {},\n    ...virtScrollPassthroughProps,\n\n    noDataLabel: String,\n    noResultsLabel: String,\n    loadingLabel: String,\n    selectedRowsLabel: Function,\n    rowsPerPageLabel: String,\n    paginationLabel: Function,\n\n    color: {\n      type: String,\n      default: 'grey-8'\n    },\n\n    titleClass: [ String, Array, Object ],\n    tableStyle: [ String, Array, Object ],\n    tableClass: [ String, Array, Object ],\n    tableHeaderStyle: [ String, Array, Object ],\n    tableHeaderClass: [ String, Array, Object ],\n    cardContainerClass: [ String, Array, Object ],\n    cardContainerStyle: [ String, Array, Object ],\n    cardStyle: [ String, Array, Object ],\n    cardClass: [ String, Array, Object ],\n\n    hideBottom: Boolean,\n    hideSelectedBanner: Boolean,\n    hideNoData: Boolean,\n    hidePagination: Boolean,\n\n    onRowClick: Function,\n    onRowDblclick: Function,\n    onRowContextmenu: Function,\n\n    ...useDarkProps,\n    ...useFullscreenProps,\n\n    ...useTableColumnSelectionProps,\n    ...useTableFilterProps,\n    ...useTablePaginationProps,\n    ...useTableRowExpandProps,\n    ...useTableRowSelectionProps,\n    ...useTableSortProps\n  },\n\n  emits: [\n    'request', 'virtualScroll',\n    ...useFullscreenEmits,\n    ...useTableRowExpandEmits,\n    ...useTableRowSelectionEmits\n  ],\n\n  setup (props, { slots, emit }) {\n    const vm = getCurrentInstance()\n    const { proxy: { $q } } = vm\n\n    const isDark = useDark(props, $q)\n    const { inFullscreen, toggleFullscreen } = useFullscreen()\n\n    const getRowKey = computed(() => (\n      typeof props.rowKey === 'function'\n        ? props.rowKey\n        : row => row[ props.rowKey ]\n    ))\n\n    const rootRef = ref(null)\n    const virtScrollRef = ref(null)\n    const hasVirtScroll = computed(() => props.grid !== true && props.virtualScroll === true)\n\n    const cardDefaultClass = computed(() =>\n      ' q-table__card'\n      + (isDark.value === true ? ' q-table__card--dark q-dark' : '')\n      + (props.square === true ? ' q-table--square' : '')\n      + (props.flat === true ? ' q-table--flat' : '')\n      + (props.bordered === true ? ' q-table--bordered' : '')\n    )\n\n    const __containerClass = computed(() =>\n      `q-table__container q-table--${ props.separator }-separator column no-wrap`\n      + (props.grid === true ? ' q-table--grid' : cardDefaultClass.value)\n      + (isDark.value === true ? ' q-table--dark' : '')\n      + (props.dense === true ? ' q-table--dense' : '')\n      + (props.wrapCells === false ? ' q-table--no-wrap' : '')\n      + (inFullscreen.value === true ? ' fullscreen scroll' : '')\n    )\n\n    const containerClass = computed(() =>\n      __containerClass.value + (props.loading === true ? ' q-table--loading' : '')\n    )\n\n    watch(\n      () => props.tableStyle + props.tableClass + props.tableHeaderStyle + props.tableHeaderClass + __containerClass.value,\n      () => { hasVirtScroll.value === true && virtScrollRef.value !== null && virtScrollRef.value.reset() }\n    )\n\n    const {\n      innerPagination,\n      computedPagination,\n      isServerSide,\n\n      requestServerInteraction,\n      setPagination\n    } = useTablePaginationState(vm, getCellValue)\n\n    const { computedFilterMethod } = useTableFilter(props, setPagination)\n    const { isRowExpanded, setExpanded, updateExpanded } = useTableRowExpand(props, emit)\n\n    const filteredSortedRows = computed(() => {\n      let rows = props.rows\n\n      if (isServerSide.value === true || rows.length === 0) {\n        return rows\n      }\n\n      const { sortBy, descending } = computedPagination.value\n\n      if (props.filter) {\n        rows = computedFilterMethod.value(rows, props.filter, computedCols.value, getCellValue)\n      }\n\n      if (columnToSort.value !== null) {\n        rows = computedSortMethod.value(\n          props.rows === rows ? rows.slice() : rows,\n          sortBy,\n          descending\n        )\n      }\n\n      return rows\n    })\n\n    const filteredSortedRowsNumber = computed(() => filteredSortedRows.value.length)\n\n    const computedRows = computed(() => {\n      let rows = filteredSortedRows.value\n\n      if (isServerSide.value === true) {\n        return rows\n      }\n\n      const { rowsPerPage } = computedPagination.value\n\n      if (rowsPerPage !== 0) {\n        if (firstRowIndex.value === 0 && props.rows !== rows) {\n          if (rows.length > lastRowIndex.value) {\n            rows = rows.slice(0, lastRowIndex.value)\n          }\n        }\n        else {\n          rows = rows.slice(firstRowIndex.value, lastRowIndex.value)\n        }\n      }\n\n      return rows\n    })\n\n    const {\n      hasSelectionMode,\n      singleSelection,\n      multipleSelection,\n      allRowsSelected,\n      someRowsSelected,\n      rowsSelectedNumber,\n\n      isRowSelected,\n      clearSelection,\n      updateSelection\n    } = useTableRowSelection(props, emit, computedRows, getRowKey)\n\n    const { colList, computedCols, computedColsMap, computedColspan } = useTableColumnSelection(props, computedPagination, hasSelectionMode)\n\n    const { columnToSort, computedSortMethod, sort } = useTableSort(props, computedPagination, colList, setPagination)\n\n    const {\n      firstRowIndex,\n      lastRowIndex,\n      isFirstPage,\n      isLastPage,\n      pagesNumber,\n      computedRowsPerPageOptions,\n      computedRowsNumber,\n\n      firstPage,\n      prevPage,\n      nextPage,\n      lastPage\n    } = useTablePagination(vm, innerPagination, computedPagination, isServerSide, setPagination, filteredSortedRowsNumber)\n\n    const nothingToDisplay = computed(() => computedRows.value.length === 0)\n\n    const virtProps = computed(() => {\n      const acc = {}\n\n      commonVirtScrollPropsList\n        .forEach(p => { acc[ p ] = props[ p ] })\n\n      if (acc.virtualScrollItemSize === void 0) {\n        acc.virtualScrollItemSize = props.dense === true ? 28 : 48\n      }\n\n      return acc\n    })\n\n    function resetVirtualScroll () {\n      hasVirtScroll.value === true && virtScrollRef.value.reset()\n    }\n\n    function getBody () {\n      if (props.grid === true) {\n        return getGridBody()\n      }\n\n      const header = props.hideHeader !== true ? getTHead : null\n\n      if (hasVirtScroll.value === true) {\n        const topRow = slots[ 'top-row' ]\n        const bottomRow = slots[ 'bottom-row' ]\n\n        const virtSlots = {\n          default: props => getTBodyTR(props.item, slots.body, props.index)\n        }\n\n        if (topRow !== void 0) {\n          const topContent = h('tbody', topRow({ cols: computedCols.value }))\n\n          virtSlots.before = header === null\n            ? () => topContent\n            : () => [ header() ].concat(topContent)\n        }\n        else if (header !== null) {\n          virtSlots.before = header\n        }\n\n        if (bottomRow !== void 0) {\n          virtSlots.after = () => h('tbody', bottomRow({ cols: computedCols.value }))\n        }\n\n        return h(QVirtualScroll, {\n          ref: virtScrollRef,\n          class: props.tableClass,\n          style: props.tableStyle,\n          ...virtProps.value,\n          scrollTarget: props.virtualScrollTarget,\n          items: computedRows.value,\n          type: '__qtable',\n          tableColspan: computedColspan.value,\n          onVirtualScroll: onVScroll\n        }, virtSlots)\n      }\n\n      const child = [\n        getTBody()\n      ]\n\n      if (header !== null) {\n        child.unshift(header())\n      }\n\n      return getTableMiddle({\n        class: [ 'q-table__middle scroll', props.tableClass ],\n        style: props.tableStyle\n      }, child)\n    }\n\n    function scrollTo (toIndex, edge) {\n      if (virtScrollRef.value !== null) {\n        virtScrollRef.value.scrollTo(toIndex, edge)\n        return\n      }\n\n      toIndex = parseInt(toIndex, 10)\n      const rowEl = rootRef.value.querySelector(`tbody tr:nth-of-type(${ toIndex + 1 })`)\n\n      if (rowEl !== null) {\n        const scrollTarget = rootRef.value.querySelector('.q-table__middle.scroll')\n        const offsetTop = rowEl.offsetTop - props.virtualScrollStickySizeStart\n        const direction = offsetTop < scrollTarget.scrollTop ? 'decrease' : 'increase'\n\n        scrollTarget.scrollTop = offsetTop\n\n        emit('virtualScroll', {\n          index: toIndex,\n          from: 0,\n          to: innerPagination.value.rowsPerPage - 1,\n          direction\n        })\n      }\n    }\n\n    function onVScroll (info) {\n      emit('virtualScroll', info)\n    }\n\n    function getProgress () {\n      return [\n        h(QLinearProgress, {\n          class: 'q-table__linear-progress',\n          color: props.color,\n          dark: isDark.value,\n          indeterminate: true,\n          trackColor: 'transparent'\n        })\n      ]\n    }\n\n    function getTBodyTR (row, bodySlot, pageIndex) {\n      const\n        key = getRowKey.value(row),\n        selected = isRowSelected(key)\n\n      if (bodySlot !== void 0) {\n        return bodySlot(\n          getBodyScope({\n            key,\n            row,\n            pageIndex,\n            __trClass: selected ? 'selected' : ''\n          })\n        )\n      }\n\n      const\n        bodyCell = slots[ 'body-cell' ],\n        child = computedCols.value.map(col => {\n          const\n            bodyCellCol = slots[ `body-cell-${ col.name }` ],\n            slot = bodyCellCol !== void 0 ? bodyCellCol : bodyCell\n\n          return slot !== void 0\n            ? slot(getBodyCellScope({ key, row, pageIndex, col }))\n            : h('td', {\n              class: col.__tdClass(row),\n              style: col.__tdStyle(row)\n            }, getCellValue(col, row))\n        })\n\n      if (hasSelectionMode.value === true) {\n        const slot = slots[ 'body-selection' ]\n        const content = slot !== void 0\n          ? slot(getBodySelectionScope({ key, row, pageIndex }))\n          : [\n              h(QCheckbox, {\n                modelValue: selected,\n                color: props.color,\n                dark: isDark.value,\n                dense: props.dense,\n                'onUpdate:modelValue': (adding, evt) => {\n                  updateSelection([ key ], [ row ], adding, evt)\n                }\n              })\n            ]\n\n        child.unshift(\n          h('td', { class: 'q-table--col-auto-width' }, content)\n        )\n      }\n\n      const data = { key, class: { selected } }\n\n      if (props.onRowClick !== void 0) {\n        data.class[ 'cursor-pointer' ] = true\n        data.onClick = evt => {\n          emit('rowClick', evt, row, pageIndex)\n        }\n      }\n\n      if (props.onRowDblclick !== void 0) {\n        data.class[ 'cursor-pointer' ] = true\n        data.onDblclick = evt => {\n          emit('rowDblclick', evt, row, pageIndex)\n        }\n      }\n\n      if (props.onRowContextmenu !== void 0) {\n        data.class[ 'cursor-pointer' ] = true\n        data.onContextmenu = evt => {\n          emit('rowContextmenu', evt, row, pageIndex)\n        }\n      }\n\n      return h('tr', data, child)\n    }\n\n    function getTBody () {\n      const\n        body = slots.body,\n        topRow = slots[ 'top-row' ],\n        bottomRow = slots[ 'bottom-row' ]\n\n      let child = computedRows.value.map(\n        (row, pageIndex) => getTBodyTR(row, body, pageIndex)\n      )\n\n      if (topRow !== void 0) {\n        child = topRow({ cols: computedCols.value }).concat(child)\n      }\n      if (bottomRow !== void 0) {\n        child = child.concat(bottomRow({ cols: computedCols.value }))\n      }\n\n      return h('tbody', child)\n    }\n\n    function getBodyScope (data) {\n      injectBodyCommonScope(data)\n\n      data.cols = data.cols.map(\n        col => injectProp({ ...col }, 'value', () => getCellValue(col, data.row))\n      )\n\n      return data\n    }\n\n    function getBodyCellScope (data) {\n      injectBodyCommonScope(data)\n      injectProp(data, 'value', () => getCellValue(data.col, data.row))\n      return data\n    }\n\n    function getBodySelectionScope (data) {\n      injectBodyCommonScope(data)\n      return data\n    }\n\n    function injectBodyCommonScope (data) {\n      Object.assign(data, {\n        cols: computedCols.value,\n        colsMap: computedColsMap.value,\n        sort,\n        rowIndex: firstRowIndex.value + data.pageIndex,\n        color: props.color,\n        dark: isDark.value,\n        dense: props.dense\n      })\n\n      hasSelectionMode.value === true && injectProp(\n        data,\n        'selected',\n        () => isRowSelected(data.key),\n        (adding, evt) => {\n          updateSelection([ data.key ], [ data.row ], adding, evt)\n        }\n      )\n\n      injectProp(\n        data,\n        'expand',\n        () => isRowExpanded(data.key),\n        adding => { updateExpanded(data.key, adding) }\n      )\n    }\n\n    function getCellValue (col, row) {\n      const val = typeof col.field === 'function' ? col.field(row) : row[ col.field ]\n      return col.format !== void 0 ? col.format(val, row) : val\n    }\n\n    const marginalsScope = computed(() => ({\n      pagination: computedPagination.value,\n      pagesNumber: pagesNumber.value,\n      isFirstPage: isFirstPage.value,\n      isLastPage: isLastPage.value,\n      firstPage,\n      prevPage,\n      nextPage,\n      lastPage,\n\n      inFullscreen: inFullscreen.value,\n      toggleFullscreen\n    }))\n\n    function getTopDiv () {\n      const\n        top = slots.top,\n        topLeft = slots[ 'top-left' ],\n        topRight = slots[ 'top-right' ],\n        topSelection = slots[ 'top-selection' ],\n        hasSelection = hasSelectionMode.value === true\n          && topSelection !== void 0\n          && rowsSelectedNumber.value > 0,\n        topClass = 'q-table__top relative-position row items-center'\n\n      if (top !== void 0) {\n        return h('div', { class: topClass }, [ top(marginalsScope.value) ])\n      }\n\n      let child\n\n      if (hasSelection === true) {\n        child = topSelection(marginalsScope.value).slice()\n      }\n      else {\n        child = []\n\n        if (topLeft !== void 0) {\n          child.push(\n            h('div', { class: 'q-table__control' }, [\n              topLeft(marginalsScope.value)\n            ])\n          )\n        }\n        else if (props.title) {\n          child.push(\n            h('div', { class: 'q-table__control' }, [\n              h('div', {\n                class: [ 'q-table__title', props.titleClass ]\n              }, props.title)\n            ])\n          )\n        }\n      }\n\n      if (topRight !== void 0) {\n        child.push(\n          h('div', { class: 'q-table__separator col' })\n        )\n        child.push(\n          h('div', { class: 'q-table__control' }, [\n            topRight(marginalsScope.value)\n          ])\n        )\n      }\n\n      if (child.length === 0) return\n      return h('div', { class: topClass }, child)\n    }\n\n    const headerSelectedValue = computed(() => (\n      someRowsSelected.value === true\n        ? null\n        : allRowsSelected.value\n    ))\n\n    function getTHead () {\n      const child = getTHeadTR()\n\n      if (props.loading === true && slots.loading === void 0) {\n        child.push(\n          h('tr', { class: 'q-table__progress' }, [\n            h('th', {\n              class: 'relative-position',\n              colspan: computedColspan.value\n            }, getProgress())\n          ])\n        )\n      }\n\n      return h('thead', child)\n    }\n\n    function getTHeadTR () {\n      const\n        header = slots.header,\n        headerCell = slots[ 'header-cell' ]\n\n      if (header !== void 0) {\n        return header(\n          getHeaderScope({ header: true })\n        ).slice()\n      }\n\n      const child = computedCols.value.map(col => {\n        const\n          headerCellCol = slots[ `header-cell-${ col.name }` ],\n          slot = headerCellCol !== void 0 ? headerCellCol : headerCell,\n          props = getHeaderScope({ col })\n\n        return slot !== void 0\n          ? slot(props)\n          : h(QTh, {\n            key: col.name,\n            props\n          }, () => col.label)\n      })\n\n      if (singleSelection.value === true && props.grid !== true) {\n        child.unshift(\n          h('th', { class: 'q-table--col-auto-width' }, ' ')\n        )\n      }\n      else if (multipleSelection.value === true) {\n        const slot = slots[ 'header-selection' ]\n        const content = slot !== void 0\n          ? slot(getHeaderScope({}))\n          : [\n              h(QCheckbox, {\n                color: props.color,\n                modelValue: headerSelectedValue.value,\n                dark: isDark.value,\n                dense: props.dense,\n                'onUpdate:modelValue': onMultipleSelectionSet\n              })\n            ]\n\n        child.unshift(\n          h('th', { class: 'q-table--col-auto-width' }, content)\n        )\n      }\n\n      return [\n        h('tr', {\n          class: props.tableHeaderClass,\n          style: props.tableHeaderStyle\n        }, child)\n      ]\n    }\n\n    function getHeaderScope (data) {\n      Object.assign(data, {\n        cols: computedCols.value,\n        sort,\n        colsMap: computedColsMap.value,\n        color: props.color,\n        dark: isDark.value,\n        dense: props.dense\n      })\n\n      if (multipleSelection.value === true) {\n        injectProp(\n          data,\n          'selected',\n          () => headerSelectedValue.value,\n          onMultipleSelectionSet\n        )\n      }\n\n      return data\n    }\n\n    function onMultipleSelectionSet (val) {\n      if (someRowsSelected.value === true) {\n        val = false\n      }\n\n      updateSelection(\n        computedRows.value.map(getRowKey.value),\n        computedRows.value,\n        val\n      )\n    }\n\n    const navIcon = computed(() => {\n      const ico = [\n        props.iconFirstPage || $q.iconSet.table.firstPage,\n        props.iconPrevPage || $q.iconSet.table.prevPage,\n        props.iconNextPage || $q.iconSet.table.nextPage,\n        props.iconLastPage || $q.iconSet.table.lastPage\n      ]\n      return $q.lang.rtl === true ? ico.reverse() : ico\n    })\n\n    function getBottomDiv () {\n      if (props.hideBottom === true) return\n\n      if (nothingToDisplay.value === true) {\n        if (props.hideNoData === true) return\n\n        const message = props.loading === true\n          ? props.loadingLabel || $q.lang.table.loading\n          : (props.filter ? props.noResultsLabel || $q.lang.table.noResults : props.noDataLabel || $q.lang.table.noData)\n\n        const noData = slots[ 'no-data' ]\n        const children = noData !== void 0\n          ? [ noData({ message, icon: $q.iconSet.table.warning, filter: props.filter }) ]\n          : [\n              h(QIcon, {\n                class: 'q-table__bottom-nodata-icon',\n                name: $q.iconSet.table.warning\n              }),\n              message\n            ]\n\n        return h('div', { class: bottomClass + ' q-table__bottom--nodata' }, children)\n      }\n\n      const bottom = slots.bottom\n\n      if (bottom !== void 0) {\n        return h('div', { class: bottomClass }, [ bottom(marginalsScope.value) ])\n      }\n\n      const child = props.hideSelectedBanner !== true && hasSelectionMode.value === true && rowsSelectedNumber.value > 0\n        ? [\n            h('div', { class: 'q-table__control' }, [\n              h('div', [\n                (props.selectedRowsLabel || $q.lang.table.selectedRecords)(rowsSelectedNumber.value)\n              ])\n            ])\n          ]\n        : []\n\n      if (props.hidePagination !== true) {\n        return h('div', {\n          class: bottomClass + ' justify-end'\n        }, getPaginationDiv(child))\n      }\n\n      if (child.length !== 0) {\n        return h('div', { class: bottomClass }, child)\n      }\n    }\n\n    function onPagSelection (pag) {\n      setPagination({\n        page: 1,\n        rowsPerPage: pag.value\n      })\n    }\n\n    function getPaginationDiv (child) {\n      let control\n      const\n        { rowsPerPage } = computedPagination.value,\n        paginationLabel = props.paginationLabel || $q.lang.table.pagination,\n        paginationSlot = slots.pagination,\n        hasOpts = props.rowsPerPageOptions.length > 1\n\n      child.push(\n        h('div', { class: 'q-table__separator col' })\n      )\n\n      if (hasOpts === true) {\n        child.push(\n          h('div', { class: 'q-table__control' }, [\n            h('span', { class: 'q-table__bottom-item' }, [\n              props.rowsPerPageLabel || $q.lang.table.recordsPerPage\n            ]),\n            h(QSelect, {\n              class: 'q-table__select inline q-table__bottom-item',\n              color: props.color,\n              modelValue: rowsPerPage,\n              options: computedRowsPerPageOptions.value,\n              displayValue: rowsPerPage === 0\n                ? $q.lang.table.allRows\n                : rowsPerPage,\n              dark: isDark.value,\n              borderless: true,\n              dense: true,\n              optionsDense: true,\n              optionsCover: true,\n              'onUpdate:modelValue': onPagSelection\n            })\n          ])\n        )\n      }\n\n      if (paginationSlot !== void 0) {\n        control = paginationSlot(marginalsScope.value)\n      }\n      else {\n        control = [\n          h('span', rowsPerPage !== 0 ? { class: 'q-table__bottom-item' } : {}, [\n            rowsPerPage\n              ? paginationLabel(firstRowIndex.value + 1, Math.min(lastRowIndex.value, computedRowsNumber.value), computedRowsNumber.value)\n              : paginationLabel(1, filteredSortedRowsNumber.value, computedRowsNumber.value)\n          ])\n        ]\n\n        if (rowsPerPage !== 0 && pagesNumber.value > 1) {\n          const btnProps = {\n            color: props.color,\n            round: true,\n            dense: true,\n            flat: true\n          }\n\n          if (props.dense === true) {\n            btnProps.size = 'sm'\n          }\n\n          pagesNumber.value > 2 && control.push(\n            h(QBtn, {\n              key: 'pgFirst',\n              ...btnProps,\n              icon: navIcon.value[ 0 ],\n              disable: isFirstPage.value,\n              onClick: firstPage\n            })\n          )\n\n          control.push(\n            h(QBtn, {\n              key: 'pgPrev',\n              ...btnProps,\n              icon: navIcon.value[ 1 ],\n              disable: isFirstPage.value,\n              onClick: prevPage\n            }),\n\n            h(QBtn, {\n              key: 'pgNext',\n              ...btnProps,\n              icon: navIcon.value[ 2 ],\n              disable: isLastPage.value,\n              onClick: nextPage\n            })\n          )\n\n          pagesNumber.value > 2 && control.push(\n            h(QBtn, {\n              key: 'pgLast',\n              ...btnProps,\n              icon: navIcon.value[ 3 ],\n              disable: isLastPage.value,\n              onClick: lastPage\n            })\n          )\n        }\n      }\n\n      child.push(\n        h('div', { class: 'q-table__control' }, control)\n      )\n\n      return child\n    }\n\n    function getGridHeader () {\n      const child = props.gridHeader === true\n        ? [\n            h('table', { class: 'q-table' }, [\n              getTHead(h)\n            ])\n          ]\n        : (\n            props.loading === true && slots.loading === void 0\n              ? getProgress(h)\n              : void 0\n          )\n\n      return h('div', { class: 'q-table__middle' }, child)\n    }\n\n    function getGridBody () {\n      const item = slots.item !== void 0\n        ? slots.item\n        : scope => {\n          const child = scope.cols.map(\n            col => h('div', { class: 'q-table__grid-item-row' }, [\n              h('div', { class: 'q-table__grid-item-title' }, [ col.label ]),\n              h('div', { class: 'q-table__grid-item-value' }, [ col.value ])\n            ])\n          )\n\n          if (hasSelectionMode.value === true) {\n            const slot = slots[ 'body-selection' ]\n            const content = slot !== void 0\n              ? slot(scope)\n              : [\n                  h(QCheckbox, {\n                    modelValue: scope.selected,\n                    color: props.color,\n                    dark: isDark.value,\n                    dense: props.dense,\n                    'onUpdate:modelValue': (adding, evt) => {\n                      updateSelection([ scope.key ], [ scope.row ], adding, evt)\n                    }\n                  })\n                ]\n\n            child.unshift(\n              h('div', { class: 'q-table__grid-item-row' }, content),\n              h(QSeparator, { dark: isDark.value })\n            )\n          }\n\n          const data = {\n            class: [\n              'q-table__grid-item-card' + cardDefaultClass.value,\n              props.cardClass\n            ],\n            style: props.cardStyle\n          }\n\n          if (\n            props.onRowClick !== void 0\n            || props.onRowDblclick !== void 0\n          ) {\n            data.class[ 0 ] += ' cursor-pointer'\n\n            if (props.onRowClick !== void 0) {\n              data.onClick = evt => {\n                emit('RowClick', evt, scope.row, scope.pageIndex)\n              }\n            }\n\n            if (props.onRowDblclick !== void 0) {\n              data.onDblclick = evt => {\n                emit('RowDblclick', evt, scope.row, scope.pageIndex)\n              }\n            }\n          }\n\n          return h('div', {\n            class: 'q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3'\n              + (scope.selected === true ? ' q-table__grid-item--selected' : '')\n          }, [\n            h('div', data, child)\n          ])\n        }\n\n      return h('div', {\n        class: [\n          'q-table__grid-content row',\n          props.cardContainerClass\n        ],\n        style: props.cardContainerStyle\n      }, computedRows.value.map((row, pageIndex) => {\n        return item(getBodyScope({\n          key: getRowKey.value(row),\n          row,\n          pageIndex\n        }))\n      }))\n    }\n\n    // expose public methods and needed computed props\n    Object.assign(vm.proxy, {\n      requestServerInteraction,\n      setPagination,\n      firstPage,\n      prevPage,\n      nextPage,\n      lastPage,\n      isRowSelected,\n      clearSelection,\n      isRowExpanded,\n      setExpanded,\n      sort,\n      resetVirtualScroll,\n      scrollTo,\n      getCellValue\n    })\n\n    injectMultipleProps(vm.proxy, {\n      filteredSortedRows: () => filteredSortedRows.value,\n      computedRows: () => computedRows.value,\n      computedRowsNumber: () => computedRowsNumber.value\n    })\n\n    return () => {\n      const child = [ getTopDiv() ]\n      const data = { ref: rootRef, class: containerClass.value }\n\n      if (props.grid === true) {\n        child.push(getGridHeader())\n      }\n      else {\n        Object.assign(data, {\n          class: [ data.class, props.cardClass ],\n          style: props.cardStyle\n        })\n      }\n\n      child.push(\n        getBody(),\n        getBottomDiv()\n      )\n\n      if (props.loading === true && slots.loading !== void 0) {\n        child.push(\n          slots.loading()\n        )\n      }\n\n      return h('div', data, child)\n    }\n  }\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}