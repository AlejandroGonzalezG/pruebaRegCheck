{"ast":null,"code":"import { ref, computed, watch, onMounted } from 'vue';\nimport uid from '../../utils/uid/uid.js';\nimport { isRuntimeSsrPreHydration } from '../../plugins/platform/Platform.js';\nfunction parseValue(val) {\n  return val === void 0 || val === null ? null : val;\n}\nfunction getId(val, required) {\n  return val === void 0 || val === null ? required === true ? `f_${uid()}` : null : val;\n}\n\n/**\n * Returns an \"id\" which is a ref() that can be used as\n * a unique identifier to apply to a DOM node attribute.\n *\n * On SSR, it takes care of generating the id on the client side (only) to\n * avoid hydration errors.\n */\nexport default function ({\n  getValue,\n  required = true\n} = {}) {\n  if (isRuntimeSsrPreHydration.value === true) {\n    const id = getValue !== void 0 ? ref(parseValue(getValue())) : ref(null);\n    if (required === true && id.value === null) {\n      onMounted(() => {\n        id.value = `f_${uid()}`; // getId(null, true)\n      });\n    }\n    if (getValue !== void 0) {\n      watch(getValue, newId => {\n        id.value = getId(newId, required);\n      });\n    }\n    return id;\n  }\n  return getValue !== void 0 ? computed(() => getId(getValue(), required)) : ref(`f_${uid()}`); // getId(null, true)\n}","map":{"version":3,"names":["ref","computed","watch","onMounted","uid","isRuntimeSsrPreHydration","parseValue","val","getId","required","getValue","value","id","newId"],"sources":["/home/alejandro/Escritorio/regcheckTest/frontend/node_modules/quasar/src/composables/use-id/use-id.js"],"sourcesContent":["import { ref, computed, watch, onMounted } from 'vue'\n\nimport uid from '../../utils/uid/uid.js'\n\nimport { isRuntimeSsrPreHydration } from '../../plugins/platform/Platform.js'\n\nfunction parseValue (val) {\n  return val === void 0 || val === null\n    ? null\n    : val\n}\n\nfunction getId (val, required) {\n  return val === void 0 || val === null\n    ? (required === true ? `f_${ uid() }` : null)\n    : val\n}\n\n/**\n * Returns an \"id\" which is a ref() that can be used as\n * a unique identifier to apply to a DOM node attribute.\n *\n * On SSR, it takes care of generating the id on the client side (only) to\n * avoid hydration errors.\n */\nexport default function ({ getValue, required = true } = {}) {\n  if (isRuntimeSsrPreHydration.value === true) {\n    const id = getValue !== void 0\n      ? ref(parseValue(getValue()))\n      : ref(null)\n\n    if (required === true && id.value === null) {\n      onMounted(() => {\n        id.value = `f_${ uid() }` // getId(null, true)\n      })\n    }\n\n    if (getValue !== void 0) {\n      watch(getValue, newId => {\n        id.value = getId(newId, required)\n      })\n    }\n\n    return id\n  }\n\n  return getValue !== void 0\n    ? computed(() => getId(getValue(), required))\n    : ref(`f_${ uid() }`) // getId(null, true)\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,QAAQ,KAAK;AAErD,OAAOC,GAAG,MAAM,wBAAwB;AAExC,SAASC,wBAAwB,QAAQ,oCAAoC;AAE7E,SAASC,UAAUA,CAAEC,GAAG,EAAE;EACxB,OAAOA,GAAG,KAAK,KAAK,CAAC,IAAIA,GAAG,KAAK,IAAI,GACjC,IAAI,GACJA,GAAG;AACT;AAEA,SAASC,KAAKA,CAAED,GAAG,EAAEE,QAAQ,EAAE;EAC7B,OAAOF,GAAG,KAAK,KAAK,CAAC,IAAIA,GAAG,KAAK,IAAI,GAChCE,QAAQ,KAAK,IAAI,GAAG,KAAML,GAAG,CAAC,CAAC,EAAG,GAAG,IAAI,GAC1CG,GAAG;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;EAAEG,QAAQ;EAAED,QAAQ,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,EAAE;EAC3D,IAAIJ,wBAAwB,CAACM,KAAK,KAAK,IAAI,EAAE;IAC3C,MAAMC,EAAE,GAAGF,QAAQ,KAAK,KAAK,CAAC,GAC1BV,GAAG,CAACM,UAAU,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAC3BV,GAAG,CAAC,IAAI,CAAC;IAEb,IAAIS,QAAQ,KAAK,IAAI,IAAIG,EAAE,CAACD,KAAK,KAAK,IAAI,EAAE;MAC1CR,SAAS,CAAC,MAAM;QACdS,EAAE,CAACD,KAAK,GAAG,KAAMP,GAAG,CAAC,CAAC,EAAG,EAAC;MAC5B,CAAC,CAAC;IACJ;IAEA,IAAIM,QAAQ,KAAK,KAAK,CAAC,EAAE;MACvBR,KAAK,CAACQ,QAAQ,EAAEG,KAAK,IAAI;QACvBD,EAAE,CAACD,KAAK,GAAGH,KAAK,CAACK,KAAK,EAAEJ,QAAQ,CAAC;MACnC,CAAC,CAAC;IACJ;IAEA,OAAOG,EAAE;EACX;EAEA,OAAOF,QAAQ,KAAK,KAAK,CAAC,GACtBT,QAAQ,CAAC,MAAMO,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAED,QAAQ,CAAC,CAAC,GAC3CT,GAAG,CAAC,KAAMI,GAAG,CAAC,CAAC,EAAG,CAAC,EAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}