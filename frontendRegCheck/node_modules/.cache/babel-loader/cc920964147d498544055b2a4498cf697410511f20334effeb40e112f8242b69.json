{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, ref, onUnmounted, Teleport } from 'vue';\nimport { createComponent } from '../../utils/private.create/create.js';\nimport { noop } from '../../utils/event/event.js';\nimport { addFocusWaitFlag, removeFocusWaitFlag } from '../../utils/private.focus/focus-manager.js';\nimport { createGlobalNode, removeGlobalNode } from '../../utils/private.config/nodes.js';\nimport { portalProxyList } from '../../utils/private.portal/portal.js';\nimport { injectProp } from '../../utils/private.inject-obj-prop/inject-obj-prop.js';\n\n/**\n * Noop internal component to ease testing\n * of the teleported content.\n *\n * const wrapper = mount(QDialog, { ... })\n * const teleportedWrapper = wrapper.findComponent({ name: 'QPortal' })\n */\nconst QPortal = createComponent({\n  name: 'QPortal',\n  setup(_, {\n    slots\n  }) {\n    return () => slots.default();\n  }\n});\nfunction isOnGlobalDialog(vm) {\n  vm = vm.parent;\n  while (vm !== void 0 && vm !== null) {\n    if (vm.type.name === 'QGlobalDialog') {\n      return true;\n    }\n    if (vm.type.name === 'QDialog' || vm.type.name === 'QMenu') {\n      return false;\n    }\n    vm = vm.parent;\n  }\n  return false;\n}\n\n// Warning!\n// You MUST specify \"inheritAttrs: false\" in your component\n\nexport default function (vm, innerRef, renderPortalContent, type) {\n  // showing, including while in show/hide transition\n  const portalIsActive = ref(false);\n\n  // showing & not in any show/hide transition\n  const portalIsAccessible = ref(false);\n  if (__QUASAR_SSR_SERVER__) {\n    return {\n      portalIsActive,\n      portalIsAccessible,\n      showPortal: noop,\n      hidePortal: noop,\n      renderPortal: noop\n    };\n  }\n  let portalEl = null;\n  const focusObj = {};\n  const onGlobalDialog = type === 'dialog' && isOnGlobalDialog(vm);\n  function showPortal(isReady) {\n    if (isReady === true) {\n      removeFocusWaitFlag(focusObj);\n      portalIsAccessible.value = true;\n      return;\n    }\n    portalIsAccessible.value = false;\n    if (portalIsActive.value === false) {\n      if (onGlobalDialog === false && portalEl === null) {\n        portalEl = createGlobalNode(false, type);\n      }\n      portalIsActive.value = true;\n\n      // register portal\n      portalProxyList.push(vm.proxy);\n      addFocusWaitFlag(focusObj);\n    }\n  }\n  function hidePortal(isReady) {\n    portalIsAccessible.value = false;\n    if (isReady !== true) return;\n    removeFocusWaitFlag(focusObj);\n    portalIsActive.value = false;\n\n    // unregister portal\n    const index = portalProxyList.indexOf(vm.proxy);\n    if (index !== -1) {\n      portalProxyList.splice(index, 1);\n    }\n    if (portalEl !== null) {\n      removeGlobalNode(portalEl);\n      portalEl = null;\n    }\n  }\n  onUnmounted(() => {\n    hidePortal(true);\n  });\n\n  // needed for portal vm detection\n  vm.proxy.__qPortal = true;\n\n  // public way of accessing the rendered content\n  injectProp(vm.proxy, 'contentEl', () => innerRef.value);\n  return {\n    showPortal,\n    hidePortal,\n    portalIsActive,\n    portalIsAccessible,\n    renderPortal: () => onGlobalDialog === true ? renderPortalContent() : portalIsActive.value === true ? [h(Teleport, {\n      to: portalEl\n    }, h(QPortal, renderPortalContent))] : void 0\n  };\n}","map":{"version":3,"names":["h","ref","onUnmounted","Teleport","createComponent","noop","addFocusWaitFlag","removeFocusWaitFlag","createGlobalNode","removeGlobalNode","portalProxyList","injectProp","QPortal","name","setup","_","slots","default","isOnGlobalDialog","vm","parent","type","innerRef","renderPortalContent","portalIsActive","portalIsAccessible","__QUASAR_SSR_SERVER__","showPortal","hidePortal","renderPortal","portalEl","focusObj","onGlobalDialog","isReady","value","push","proxy","index","indexOf","splice","__qPortal","to"],"sources":["/app/node_modules/quasar/src/composables/private.use-portal/use-portal.js"],"sourcesContent":["import { h, ref, onUnmounted, Teleport } from 'vue'\n\nimport { createComponent } from '../../utils/private.create/create.js'\nimport { noop } from '../../utils/event/event.js'\nimport { addFocusWaitFlag, removeFocusWaitFlag } from '../../utils/private.focus/focus-manager.js'\nimport { createGlobalNode, removeGlobalNode } from '../../utils/private.config/nodes.js'\nimport { portalProxyList } from '../../utils/private.portal/portal.js'\nimport { injectProp } from '../../utils/private.inject-obj-prop/inject-obj-prop.js'\n\n/**\n * Noop internal component to ease testing\n * of the teleported content.\n *\n * const wrapper = mount(QDialog, { ... })\n * const teleportedWrapper = wrapper.findComponent({ name: 'QPortal' })\n */\nconst QPortal = createComponent({\n  name: 'QPortal',\n  setup (_, { slots }) {\n    return () => slots.default()\n  }\n})\n\nfunction isOnGlobalDialog (vm) {\n  vm = vm.parent\n\n  while (vm !== void 0 && vm !== null) {\n    if (vm.type.name === 'QGlobalDialog') {\n      return true\n    }\n    if (vm.type.name === 'QDialog' || vm.type.name === 'QMenu') {\n      return false\n    }\n\n    vm = vm.parent\n  }\n\n  return false\n}\n\n// Warning!\n// You MUST specify \"inheritAttrs: false\" in your component\n\nexport default function (vm, innerRef, renderPortalContent, type) {\n  // showing, including while in show/hide transition\n  const portalIsActive = ref(false)\n\n  // showing & not in any show/hide transition\n  const portalIsAccessible = ref(false)\n\n  if (__QUASAR_SSR_SERVER__) {\n    return {\n      portalIsActive,\n      portalIsAccessible,\n\n      showPortal: noop,\n      hidePortal: noop,\n      renderPortal: noop\n    }\n  }\n\n  let portalEl = null\n  const focusObj = {}\n  const onGlobalDialog = type === 'dialog' && isOnGlobalDialog(vm)\n\n  function showPortal (isReady) {\n    if (isReady === true) {\n      removeFocusWaitFlag(focusObj)\n      portalIsAccessible.value = true\n      return\n    }\n\n    portalIsAccessible.value = false\n\n    if (portalIsActive.value === false) {\n      if (onGlobalDialog === false && portalEl === null) {\n        portalEl = createGlobalNode(false, type)\n      }\n\n      portalIsActive.value = true\n\n      // register portal\n      portalProxyList.push(vm.proxy)\n\n      addFocusWaitFlag(focusObj)\n    }\n  }\n\n  function hidePortal (isReady) {\n    portalIsAccessible.value = false\n\n    if (isReady !== true) return\n\n    removeFocusWaitFlag(focusObj)\n    portalIsActive.value = false\n\n    // unregister portal\n    const index = portalProxyList.indexOf(vm.proxy)\n    if (index !== -1) {\n      portalProxyList.splice(index, 1)\n    }\n\n    if (portalEl !== null) {\n      removeGlobalNode(portalEl)\n      portalEl = null\n    }\n  }\n\n  onUnmounted(() => { hidePortal(true) })\n\n  // needed for portal vm detection\n  vm.proxy.__qPortal = true\n\n  // public way of accessing the rendered content\n  injectProp(vm.proxy, 'contentEl', () => innerRef.value)\n\n  return {\n    showPortal,\n    hidePortal,\n\n    portalIsActive,\n    portalIsAccessible,\n\n    renderPortal: () => (\n      onGlobalDialog === true\n        ? renderPortalContent()\n        : (\n            portalIsActive.value === true\n              ? [ h(Teleport, { to: portalEl }, h(QPortal, renderPortalContent)) ]\n              : void 0\n          )\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}